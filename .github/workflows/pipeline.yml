name: CI Checks

on:
  workflow_dispatch:
    branches:
      - main
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  test:
    needs:
      - format-check
      - lint
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.18
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Run Test
        run: make test
      - name: Coverage Check
        run: make coverage
      - name: Generate Report
        run: make report
      - name: Copy Files
        run: |
            mkdir reports
            cp cover.html reports/.
      - name: Archive
        uses: actions/upload-artifact@v2
        with:
            name: reports
            path: reports

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint
        uses: golangci/golangci-lint-action@v2

  format-check:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.18
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Run format check
        run: make check-format
      - name: Vet
        run: go vet ./...

  build:
    name: Build App
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.18

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: make build

      - name: Copy Files
        run: |
          mkdir  artifacts
          cp api artifacts/.

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: artifacts

  deliver:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: api
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body:
            Still in experimentation phase
          draft: true
          prerelease: true
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:
            ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: api
          asset_name: api
          asset_content_type: application/octet-stream

  deploy-function:
    name: Deploy FaaS
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Check out code int the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Authenticate
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gcp_credentials }}

      - name: Deploy function
        id: deploy
        uses: google-github-actions/deploy-cloud-functions@main
        with:
          project_id: roster-griese
          name: translate
          entry_point: Translate
          runtime: go119

      - name: Test the function
        id: test
        run: curl "${{ steps.deploy.outputs.url }}/roster"

  deploy-paas:
    name: Deploy PaaS
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Authenticate
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gcp_credentials }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 468.0.0'

      - name: Use gcloud CLI
        run: 'gcloud info'

      - name: Install app engine component
        run: 'gcloud --quiet components install app-engine-go'

      - name: Use gcloud CLI
        run: 'gcloud info'

      - name: Deploy App
        id: deploy
        uses: 'google-github-actions/deploy-appengine@v2'
        with:
          project_id: roster-griese

      - id: test
        run: curl "${{ steps.deploy.outputs.url }}/roster"
